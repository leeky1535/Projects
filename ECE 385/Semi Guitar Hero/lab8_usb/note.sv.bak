module  note ( input Reset, frame_clk,
               output [9:0]  NoteX, NoteY, NoteS, 
					input [7:0] keycode);
    
    logic [9:0] Note_X_Pos, Note_X_Motion, Note_Y_Pos, Note_Y_Motion, Note_Size;
	 
    parameter [9:0] Note_X_Center=320;  // Center position on the X axis
    parameter [9:0] Note_Y_Center=240;  // Center position on the Y axis
    parameter [9:0] Note_X_Min=0;       // Leftmost point on the X axis
    parameter [9:0] Note_X_Max=639;     // Rightmost point on the X axis
    parameter [9:0] Note_Y_Min=0;       // Topmost point on the Y axis
    parameter [9:0] Note_Y_Max=479;     // Bottommost point on the Y axis
    parameter [9:0] Note_X_Step=1;      // Step size on the X axis
    parameter [9:0] Note_Y_Step=1;      // Step size on the Y axis

    assign Note_Size = 4;  // assigns the value 4 as a 10-digit binary number, ie "0000000100"
   
    always_ff @ (posedge Reset or posedge frame_clk )
    begin: Move_Note
        if (Reset)  // Asynchronous Reset
        begin 
            Note_Y_Motion <= 10'd0; //Note_Y_Step;
				Note_X_Motion <= 10'd0; //Note_X_Step;
				Note_Y_Pos <= Note_Y_Center;
				Note_X_Pos <= Note_X_Center;
        end
           
        else 
        begin 
				 if ( (Note_Y_Pos + Note_Size) >= Note_Y_Max )  // Note is at the bottom edge, BOUNCE!
					  Note_Y_Motion <= (~ (Note_Y_Step) + 1'b1);  // 2's complement.
					  
				 else if ( (Note_Y_Pos - Note_Size) <= Note_Y_Min )  // Note is at the top edge, BOUNCE!
					  Note_Y_Motion <= Note_Y_Step;
				 
				 else if ( (Note_X_Pos + Note_Size) >= Note_X_Max )  // Note is at the right edge, BOUNCE!
					  Note_X_Motion <= (~ (Note_X_Step) + 1'b1);  // 2's complement.
					  
				 else if ( (Note_X_Pos - Note_Size) <= Note_X_Min )  // Note is at the left edge, BOUNCE!
					  Note_X_Motion <= Note_X_Step;
				 
				 else 
				 begin
						if ( keycode == 8'h1A)
						begin
							Note_Y_Motion <= (~ (Note_Y_Step) + 1'b1);
							Note_X_Motion <= 10'd0;
						end
						else if (keycode == 8'h16) 
						begin
							Note_Y_Motion <= Note_Y_Step;
							Note_X_Motion <= 10'd0;
					   end
						else if (keycode == 8'h04)
						begin
							Note_X_Motion <= (~ (Note_X_Step) + 1'b1);
							//Note_X_Motion <= 10'b1111111111;
					   	Note_Y_Motion <= 10'd0;
						end
						else if (keycode == 8'h07)
						begin
							Note_X_Motion <= Note_X_Step;
							//Note_X_Motion <= 10'd1;
	   	   			Note_Y_Motion <= 10'd0;		
						end
						//else
						//Note_Y_Motion <= Note_Y_Motion;  // Note is somewhere in the middle, don't bounce, just keep moving			  
						//Note_X_Motion <= Note_X_Motion;  // You need to remove this and make both X and Y respond to keyboard input
				  end

				 Note_Y_Pos <= (Note_Y_Pos + Note_Y_Motion);  // Update Note position
				 Note_X_Pos <= (Note_X_Pos + Note_X_Motion);
			
			
	  /**************************************************************************************
	    ATTENTION! Please answer the following quesiton in your lab report! Points will be allocated for the answers!
		 Hidden Question #2/2:
          Note that Note_Y_Motion in the above statement may have been changed at the same clock edge
          that is causing the assignment of Note_Y_pos.  Will the new value of Note_Y_Motion be used,
          or the old?  How will this impact behavior of the Note during a bounce, and how might that 
          interact with a response to a keypress?  Can you fix it?  Give an answer in your Post-Lab.
      **************************************************************************************/
      
			
		end  
    end
       
    assign NoteX = Note_X_Pos;
   
    assign NoteY = Note_Y_Pos;
   
    assign NoteS = Note_Size;
    

endmodule
